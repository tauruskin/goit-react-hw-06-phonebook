{"version":3,"sources":["redux/actions/contactAction.js","redux/constants/contactConstants.js","redux/reducers/contactReducer.js","redux/reducers/index.js","redux/store.js","components/phoneForm/PhoneForm.js","components/filter/Filter.js","components/singleContact/SingleContact.js","components/contactList/ContactList.js","components/app/App.js","index.js"],"names":["addContact","createAction","name","number","payload","id","uuidv4","deleteContact","contactStorage","handleFilter","target","value","items","createReducer","state","filter","contact","combineReducers","store","configureStore","reducer","contacts","rootReducer","devTools","process","PhoneForm","formInitialState","alert","inputHandler","setState","submitHandler","e","preventDefault","props","find","toggleAlert","reset","status","this","CSSTransition","in","classNames","timeout","unmountOnExit","onEntered","onClick","className","onSubmit","type","placeholder","onChange","Component","mapDispatchToProps","connect","ownProps","dispatch","normalizedFilter","toLowerCase","includes","TransitionGroup","component","map","key","App","animation","savedContacts","localStorage","getItem","JSON","parse","prevProps","setItem","stringify","appear","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8eeb172d.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {\r\n  ADD_CONTACT,\r\n  DELETE_CONTACT,\r\n  CONTACT_STORAGE,\r\n  CONTACT_FILTER,\r\n} from '../constants/contactConstants';\r\n\r\nexport const addContact = createAction(ADD_CONTACT, (name, number) => ({\r\n  payload: {\r\n    id: uuidv4(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\nexport const deleteContact = createAction(DELETE_CONTACT);\r\nexport const contactStorage = createAction(CONTACT_STORAGE);\r\nexport const handleFilter = createAction(CONTACT_FILTER, ({ target }) => ({\r\n  payload: target.value,\r\n}));\r\n\r\n// export const addContact = (name, number) => ({\r\n//   type: ADD_CONTACT,\r\n//   payload: {\r\n//   id: uuidv4(),\r\n//   name,\r\n//   number,\r\n// },\r\n// });\r\n\r\n// export const deleteContact = (id) => ({\r\n//   type: DELETE_CONTACT,\r\n//   payload: id,\r\n// });\r\n\r\n// export const contactStorage = (arr) => ({\r\n//   type: CONTAT_STORAGE,\r\n//   payload: arr,\r\n// });\r\n\r\n// export const handleFilter = (e) => ({\r\n//   type: QUERY_FILTER,\r\n//   payload: e.target.value,\r\n// });\r\n","export const ADD_CONTACT = '@contacts/add';\r\nexport const DELETE_CONTACT = '@contact/delete';\r\nexport const CONTACT_STORAGE = '@contact/storage';\r\nexport const CONTACT_FILTER = '@contact/filter';\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  addContact,\r\n  deleteContact,\r\n  contactStorage,\r\n  handleFilter,\r\n} from '../actions/contactAction';\r\n\r\nconst removeContact = (state, { payload }) =>\r\n  state.filter(contact => contact.id !== payload);\r\n\r\nexport const items = createReducer([], {\r\n  [addContact]: (state, { payload }) => [...state, payload],\r\n  [deleteContact]: removeContact,\r\n  [contactStorage]: (state, { payload }) => payload,\r\n});\r\n\r\nexport const filter = createReducer('', {\r\n  [handleFilter]: (state, { payload }) => (state = payload),\r\n});\r\n","import { combineReducers } from 'redux';\r\nimport { items, filter } from './contactReducer';\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport rootReducer from './reducers';\r\n\r\nconst store = configureStore({\r\n  reducer: { contacts: rootReducer },\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n});\r\n\r\nexport default store;\r\n\r\n// -----------------------------------\r\n\r\n// import { createStore } from \"redux\";\r\n// import { combineReducers } from \"redux\";\r\n// import { composeWithDevTools } from \"redux-devtools-extension\";\r\n// import contactsReducer from \"./reducers\";\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducer,\r\n// });\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\n// export default store;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport PropTypes from 'prop-types';\r\nimport { addContact } from '../../redux/actions/contactAction';\r\nimport './PhoneForm.css';\r\n\r\nclass PhoneForm extends Component {\r\n  formInitialState = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n  state = {\r\n    ...this.formInitialState,\r\n    alert: false,\r\n  };\r\n\r\n  inputHandler = ({ target }) => {\r\n    const { value, name } = target;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  submitHandler = e => {\r\n    const { name, number, alert } = this.state;\r\n    e.preventDefault();\r\n\r\n    const { contacts } = this.props;\r\n    const isExists = contacts.find(contact => contact.name === name);\r\n\r\n    if (isExists) {\r\n      this.toggleAlert(alert);\r\n      return this.reset();\r\n    }\r\n\r\n    this.props.addContact(name, number);\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ ...this.formInitialState });\r\n  };\r\n\r\n  toggleAlert = status => {\r\n    this.setState({ alert: !status });\r\n  };\r\n\r\n  render() {\r\n    const { name, number, alert } = this.state;\r\n    const alertDelay = () => this.setState({ alert: !alert });\r\n\r\n    return (\r\n      <>\r\n        <CSSTransition\r\n          in={alert}\r\n          classNames=\"alert\"\r\n          timeout={1500}\r\n          unmountOnExit\r\n          onEntered={alertDelay}\r\n        >\r\n          <button\r\n            onClick={this.toggleAlert}\r\n            className=\"alert\"\r\n          >{`Contact already exists!`}</button>\r\n        </CSSTransition>\r\n        <form className=\"contacts_form\" onSubmit={this.submitHandler}>\r\n          <label className=\"input_name\">\r\n            Name\r\n            <br></br>\r\n            <input\r\n              className=\"input_form\"\r\n              type=\"text\"\r\n              name=\"name\"\r\n              placeholder=\"Add name\"\r\n              value={name}\r\n              onChange={this.inputHandler}\r\n            />\r\n          </label>\r\n          <br></br>\r\n          <label className=\"input_name\">\r\n            Number\r\n            <br></br>\r\n            <input\r\n              className=\"input_form\"\r\n              type=\"text\"\r\n              name=\"number\"\r\n              placeholder=\"Add phone number\"\r\n              value={number}\r\n              onChange={this.inputHandler}\r\n            />\r\n          </label>\r\n          <br></br>\r\n          <button type=\"submit\" className=\"submitBtn\">\r\n            Create contact\r\n          </button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: state.contacts.items,\r\n  filter: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  addContact,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PhoneForm);\r\n\r\nPhoneForm.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      id: PropTypes.string,\r\n      number: PropTypes.string,\r\n    }),\r\n  ).isRequired,\r\n  filter: PropTypes.string.isRequired,\r\n  addContact: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { handleFilter } from '../../redux/actions/contactAction';\r\nimport './Filter.css';\r\n\r\nconst Filter = ({ filter, handleFilter }) => {\r\n  return (\r\n    <div className=\"filter_box\">\r\n      <label className=\"input_label\">\r\n        Find contacts by name\r\n        <br></br>\r\n        <input\r\n          className=\"filter_form\"\r\n          type=\"text\"\r\n          name=\"filter\"\r\n          placeholder=\"Find contact\"\r\n          value={filter}\r\n          onChange={handleFilter}\r\n        />\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  filter: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  handleFilter,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n\r\nFilter.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      id: PropTypes.string,\r\n      number: PropTypes.string,\r\n    }).isRequired,\r\n  ),\r\n  filter: PropTypes.string.isRequired,\r\n  handleFilter: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { deleteContact } from '../../redux/actions/contactAction';\r\nimport './SingleContact.css';\r\n\r\nconst SingleContact = ({ name, number, deleteContact }) => {\r\n  return (\r\n    <li className=\"contact\">\r\n      <h4>{name}</h4>\r\n      <p>{number}</p>\r\n      <button className=\"deleteButton\" type=\"button\" onClick={deleteContact}>\r\n        &#10008;\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const contact = state.contacts.items.find(\r\n    contact => contact.id === ownProps.id,\r\n  );\r\n  return { ...contact };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  deleteContact: () => dispatch(deleteContact(ownProps.id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleContact);\r\n\r\nSingleContact.propTypes = {\r\n  name: PropTypes.string,\r\n  id: PropTypes.string.isRequired,\r\n  number: PropTypes.string,\r\n  deleteContact: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\nimport SingleContact from '../singleContact/SingleContact';\r\nimport './ContactList.css';\r\n\r\nconst ContactList = ({ contacts }) => {\r\n  return (\r\n    <TransitionGroup component=\"ul\" className=\"contact_List\">\r\n      {contacts.map(({ id }) => (\r\n        <CSSTransition key={id} classNames=\"list_item\" timeout={250}>\r\n          <SingleContact id={id} />\r\n        </CSSTransition>\r\n      ))}\r\n    </TransitionGroup>\r\n  );\r\n};\r\nconst mapStateToProps = state => {\r\n  const { items, filter } = state.contacts;\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  const getFilteredContact = items.filter(contact =>\r\n    contact.name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n  return {\r\n    contacts: getFilteredContact,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ContactList);\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      id: PropTypes.string,\r\n      number: PropTypes.string,\r\n    }),\r\n  ).isRequired,\r\n};\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { contactStorage } from '../../redux/actions/contactAction';\r\nimport PhoneForm from '../phoneForm/PhoneForm';\r\nimport Filter from '../filter/Filter';\r\nimport ContactList from '../contactList/ContactList';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    animation: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState(state => ({\r\n      animation: !state.animation,\r\n    }));\r\n\r\n    const savedContacts = localStorage.getItem('contacts');\r\n    if (savedContacts) {\r\n      this.props.contactStorage(JSON.parse(savedContacts));\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { contacts } = this.props;\r\n    if (prevProps.contacts !== contacts) {\r\n      localStorage.setItem('contacts', JSON.stringify(contacts));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <CSSTransition\r\n          in={true}\r\n          appear={true}\r\n          classNames=\"title-slideIn\"\r\n          timeout={500}\r\n          unmountOnExit\r\n        >\r\n          <h1 className=\"app_title\">Phonebook</h1>\r\n        </CSSTransition>\r\n\r\n        <PhoneForm />\r\n\r\n        {this.props.contacts.length === 0 && (\r\n          <>\r\n            <h2 className=\"contact_title\">Contacts</h2>\r\n            <p>Contacts list is empty. Please, create new cotnact!</p>\r\n          </>\r\n        )}\r\n\r\n        <CSSTransition\r\n          in={this.props.contacts.length > 1}\r\n          classNames=\"filter_animation\"\r\n          timeout={250}\r\n          unmountOnExit\r\n        >\r\n          <Filter />\r\n        </CSSTransition>\r\n\r\n        <ContactList />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: state.contacts.items,\r\n});\r\nconst mapDispatchToProps = {\r\n  contactStorage,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport App from './components/app/App';\nimport './index.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}